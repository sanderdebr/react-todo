{"version":3,"sources":["components/AddToDo.jsx","components/ToDo.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["AddToDo","props","onSubmit","addToDo","Grid","container","direction","justify","alignItems","TextField","label","variant","onChange","handleChange","type","value","input","placeholder","Button","color","onClick","ToDo","console","log","date","TableRow","TableCell","title","className","width","height","viewBox","fill","xmlns","fillRule","d","ToDoList","Table","TableHead","TableBody","todos","map","todo","index","key","App","e","setState","target","state","preventDefault","newToDo","Date","toLocaleDateString","concat","document","querySelector","this","Container","maxWidth","Paper","Typography","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b10180a.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst AddToDo = props => {\r\n    return (\r\n        <form onSubmit={props.addToDo}>\r\n            <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" >\r\n                <TextField label=\"Standard\" variant=\"outlined\" onChange={props.handleChange} type=\"text\" value={props.input} placeholder=\"Add a ToDo..\"></TextField>\r\n                <Button variant=\"contained\" color=\"primary\" onClick={props.addToDo} type=\"submit\"type=\"button\">Add</Button>\r\n            </Grid>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddToDo;","import React from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst ToDo = props => {\r\n    console.log(props.date);\r\n    return (\r\n        <TableRow>\r\n            <TableCell>{props.title}</TableCell>\r\n            <TableCell>{props.date}</TableCell>\r\n            <TableCell>\r\n                <svg className=\"bi bi-pencil\" width=\"2em\" height=\"2em\" viewBox=\"0 0 20 20\" fill=\"gold\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M13.293 3.293a1 1 0 011.414 0l2 2a1 1 0 010 1.414l-9 9a1 1 0 01-.39.242l-3 1a1 1 0 01-1.266-1.265l1-3a1 1 0 01.242-.391l9-9zM14 4l2 2-9 9-3 1 1-3 9-9z\" ></path>\r\n                    <path fillRule=\"evenodd\" d=\"M14.146 8.354l-2.5-2.5.708-.708 2.5 2.5-.708.708zM5 12v.5a.5.5 0 00.5.5H6v.5a.5.5 0 00.5.5H7v.5a.5.5 0 00.5.5H8v-1.5a.5.5 0 00-.5-.5H7v-.5a.5.5 0 00-.5-.5H5z\" ></path>\r\n                </svg>           \r\n            </TableCell>\r\n            <TableCell>\r\n                <svg className=\"bi bi-x-circle\" width=\"2em\" height=\"2em\" viewBox=\"0 0 20 20\" fill=\"darkred\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 17a7 7 0 100-14 7 7 0 000 14zm0 1a8 8 0 100-16 8 8 0 000 16z\"></path>\r\n                    <path fillRule=\"evenodd\" d=\"M12.646 13.354l-6-6 .708-.708 6 6-.708.708z\" ></path>\r\n                    <path fillRule=\"evenodd\" d=\"M7.354 13.354l6-6-.708-.708-6 6 .708.708z\" ></path>\r\n                </svg>\r\n            </TableCell>\r\n        </TableRow>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo.jsx';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst ToDoList = props => {\r\n\r\n    return (\r\n        <Table className=\"table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>ToDo</TableCell>\r\n                    <TableCell>Edit</TableCell>\r\n                    <TableCell>Delete</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    // Map want forEach werkt niet\r\n                    props.todos.map((todo, index) => \r\n                        <ToDo key={index} date={todo.date} title={todo.title} />\r\n                    )\r\n                }\r\n\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, { Component } from 'react';\nimport AddToDo from './components/AddToDo.jsx';\nimport ToDoList from './components/ToDoList.jsx';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\n\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      input: '',\n      todos: []\n    }\n\n  }\n\n  handleChange = (e) => {\n    this.setState({ input: e.target.value })\n    console.log(this.state.todos);\n  }\n\n  addToDo = e => {\n\n    e.preventDefault();\n\n    if (this.state.input) {\n\n      // setState als functie  met concat want push it niet toegestaan\n      this.setState( (state) => {\n\n        const date = new Date();\n\n        // Nieuw todo als object maken\n        const newToDo = {\n          date: date.toLocaleDateString(),\n          title: state.input,\n        }\n        const todos = state.todos.concat(newToDo);\n\n        // State updaten door nieuwe state object te returnen\n        return {\n          todos,\n          input: ''\n        };\n\n      });\n\n      // Maak input veld weer leeg\n      document.querySelector('input').value = '';\n\n    }\n\n  };\n\n  render() {\n\n    const { input } = this.state;\n\n    return (\n      <Container className=\"container\" maxWidth=\"sm\">\n\n            <Paper className=\"paper\">\n              <Typography variant=\"h4\">React ToDo List</Typography>\n              <Typography className=\"subtitle\" variant=\"h5\">{input}</Typography>\n            </Paper>\n\n            <Paper className=\"paper\">\n                <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" >\n                  <AddToDo value={input} placeholder={input} handleChange={this.handleChange} addToDo={this.addToDo} />\n                  <Button variant=\"contained\" color=\"primary\" className=\"btn btn-secondary\">Add 5 random ToDos</Button>\n                </Grid>\n            </Paper>\n\n            <Paper className=\"paper\">\n              <h2>ToDo list</h2>\n              <ToDoList todos={this.state.todos} />\n            </Paper>\n\n      </Container>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}