{"version":3,"sources":["components/AddToDo.jsx","components/ToDo.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["AddToDo","props","onSubmit","addToDo","Grid","container","direction","justify","alignItems","TextField","label","variant","onChange","handleChange","type","value","input","Button","className","color","onClick","ToDo","TableRow","data-id","id","status","TableCell","Checkbox","handleStatus","checked","date","disabled","onBlur","updated","updateToDo","defaultValue","title","openDialog","ToDoList","Table","TableHead","TableBody","todos","map","todo","index","key","uuidv1","require","App","defaultToDos","e","setState","target","preventDefault","state","Date","newToDo","toLocaleDateString","concat","document","querySelector","snackbarMsg","snackbarState","setTimeout","targetID","closest","dataset","indexArr","findIndex","obj","todoStatus","todoTitle","currentToDo","dialog","closeDialog","deleteToDo","parentNode","currTodos","console","log","newTodos","splice","dialogToDo","this","Container","maxWidth","Paper","Typography","placeholder","Snackbar","ref","anchorOrigin","vertical","horizontal","message","open","onRequestClose","Dialog","DialogTitle","DialogContent","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.89166818.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst AddToDo = props => {\r\n    return (\r\n        <form onSubmit={props.addToDo}>\r\n            <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" >\r\n                <TextField label=\"Add an ToDo..\" variant=\"outlined\" onChange={props.handleChange} type=\"text\" value={props.input}></TextField>\r\n                <Button className=\"addBtn\" variant=\"contained\" color=\"primary\" onClick={props.addToDo} type=\"submit\"type=\"button\">Add</Button>\r\n            </Grid>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddToDo;","import React from 'react';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst ToDo = props => {\r\n\r\n    const showToDo = status => {\r\n        if (status == true) {\r\n            return  (\r\n                <>\r\n                    <TableCell>\r\n                        <Checkbox onClick={props.handleStatus} checked={props.status} />\r\n                    </TableCell>\r\n                    <TableCell className=\"disabled\">{props.date}</TableCell>\r\n                    <TableCell>\r\n                        <TextField type=\"text\" disabled onBlur={props.updated} onChange={props.updateToDo} defaultValue={props.title} />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        <DeleteIcon onClick={props.openDialog} color=\"secondary\" />\r\n                    </TableCell>\r\n                </>\r\n            );\r\n        } else {\r\n            return (\r\n                <>\r\n                    <TableCell>\r\n                        <Checkbox onClick={props.handleStatus} checked={props.status} />\r\n                    </TableCell>\r\n                    <TableCell>{props.date}</TableCell>\r\n                    <TableCell>\r\n                        <TextField type=\"text\" onBlur={props.updated} onChange={props.updateToDo} defaultValue={props.title} />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                        <DeleteIcon onClick={props.openDialog} color=\"secondary\" />\r\n                    </TableCell>\r\n                </>\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <TableRow data-id={props.id}>\r\n            {showToDo(props.status)}\r\n        </TableRow>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo.jsx';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\n\r\nconst ToDoList = props => {\r\n    return (\r\n        <Table className=\"table\">\r\n            <TableHead>\r\n                <TableRow>\r\n                    <TableCell>Status</TableCell>\r\n                    <TableCell>Date</TableCell>\r\n                    <TableCell>ToDo</TableCell>\r\n                    <TableCell>Delete</TableCell>\r\n                </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n                {\r\n                    // Map want forEach werkt niet\r\n                    props.todos.map((todo, index) => \r\n                        <ToDo \r\n                            key={todo.id} \r\n                            id={todo.id} \r\n                            status={todo.status} \r\n                            handleStatus={props.handleStatus} \r\n                            updated={props.updated} \r\n                            updateToDo={props.updateToDo} \r\n                            openDialog={props.openDialog}\r\n                            date={todo.date} \r\n                            title={todo.title} \r\n                        />\r\n                    )\r\n                }\r\n\r\n            </TableBody>\r\n        </Table>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, { Component } from 'react';\nimport AddToDo from './components/AddToDo.jsx';\nimport ToDoList from './components/ToDoList.jsx';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nimport './App.css';\n\nconst uuidv1 = require('uuid/v1');\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      input: '',\n      snackbarMsg: '',\n      snackbarState: false,\n      dialog: false,\n      dialogToDo: '',\n      todos: this.defaultToDos()\n    }\n\n  }\n\n  defaultToDos = () => {\n    return [{\n      id: uuidv1(),\n      status: false,\n      date: '31-01-2019',\n      title: 'default'\n    },\n    {\n      id: uuidv1(),\n      status: true,\n      date: '1-02-2019',\n      title: 'default'\n    }];\n  }\n\n  // Type input field\n  handleChange = (e) => {\n    this.setState({ input: e.target.value })\n  }\n\n  addToDo = e => {\n    e.preventDefault();\n    if (this.state.input) {\n      // setState als functie  met concat want push it niet toegestaan\n      this.setState( (state) => {\n        const date = new Date();\n        // Nieuw todo als object maken\n        const newToDo = {\n          id: uuidv1(),\n          status: 0,\n          date: date.toLocaleDateString(),\n          title: state.input,\n        }\n        const todos = state.todos.concat(newToDo);\n        // State updaten door nieuwe state object te returnen\n        return {\n          todos,\n          input: ''\n        };\n      });\n      // Maak input veld weer leeg\n      document.querySelector('input').value = '';\n    }\n  };\n\n  // Show notification when user clicks out of edit text box\n  // Remove after 2 seconds\n  updated = () => {\n      this.setState({\n        snackbarMsg: 'Updated ToDo',\n        snackbarState: true\n      })\n      setTimeout(() => {\n        this.setState({\n          snackbarState: false\n        })\n      }, 2000);\n  }\n\n  // Handle checkbox status\n  handleStatus = e => {\n     // Update state met nieuwe todo status\n    const targetID = e.target.closest('tr').dataset.id;\n     // 1. Vind index van todo item in array state.todos\n    const indexArr = this.state.todos.findIndex((obj => obj.id === targetID));\n    // 2. Make a array copy of the todos\n    let todos = [...this.state.todos];\n    // 3. Make an object copy of the item that will be mutated\n    let todoStatus = {...todos[indexArr]};\n    // 4. Set new value\n    e.target.checked ? todoStatus = true : todoStatus = false;\n    // 5. Put it back in the copy array\n    todos[indexArr].status = todoStatus;\n    // 6. Set state to new copy\n    this.setState({\n        todos: todos,\n    })\n\n  }\n\n  updateToDo = input => {\n    const targetID = input.target.closest('tr').dataset.id;\n    \n    // Update state met nieuwe ToDo value\n    // 1. Vind index van todo item in array state.todos\n    const indexArr = this.state.todos.findIndex((obj => obj.id === targetID));\n    // 2. Make a array copy of the todos\n    let todos = [...this.state.todos];\n    // 3. Make an object copy of the item that will be mutated\n    let todoTitle = {...todos[indexArr]};\n    // 4. Set new value\n    todoTitle = input.target.value;\n    // 5. Put it back in the copy array\n    todos[indexArr].title = todoTitle;\n    // 6. Set state to new copy\n    this.setState({\n        todos: todos,\n    })\n\n  }\n\n  // Set currentToDo as ToDo ID for the dialog\n  openDialog = (e) => {\n    const targetID = e.target.closest('tr').dataset.id;\n    this.setState({\n        currentToDo: targetID,\n        dialog: true\n    })\n  }\n\n  closeDialog = () => {\n    this.setState({ dialog: false });\n  }\n\n  deleteToDo = (e) => {\n    const targetID = e.target.parentNode.dataset.id;\n    // Update state met verwijderde ToDo item\n    // 1. Vind index van todo item in array state.todos\n    const indexArr = this.state.todos.findIndex((obj => obj.id === targetID));\n\n    const currTodos = this.state.todos;\n\n    console.log('todosBeforeSplice:', currTodos);\n    // 3. Remove item from array\n    let  newTodos = currTodos.splice(indexArr, 1);\n    console.log('todosAfterSplice:', newTodos);\n\n    // 4. Set state to new copy\n    this.setState({\n        todos: newTodos,\n        dialog: false\n    })\n  }\n\n  render() {\n\n    const { input } = this.state;\n\n    return (\n\n      <Container className=\"container\" maxWidth=\"sm\">\n\n            <Paper className=\"paper\">\n              <Typography variant=\"h5\">React ToDo List</Typography>\n            </Paper>\n\n            <Paper className=\"paper\">\n                <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" >\n                  <AddToDo value={input} placeholder={input} handleChange={this.handleChange} addToDo={this.addToDo} />\n                  <Button variant=\"contained\" color=\"secondary\" className=\"btn btn-secondary\">Add 5 random ToDos</Button>\n                </Grid>\n            </Paper>\n\n            <Paper className=\"paper\">\n              <ToDoList \n                todos={this.state.todos} \n                handleStatus={this.handleStatus} \n                updated={this.updated} \n                updateToDo={this.updateToDo} \n                openDialog={this.openDialog}\n              />\n            </Paper>\n\n            <Snackbar ref=\"snackbar\"\n              anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\"\n              }}\n              message= { this.state.snackbarMsg }\n              open={ this.state.snackbarState ? true : false }\n              onRequestClose= { () => { return null } } \t\n            />\n\n            <Dialog open={this.state.dialog}>\n                <DialogTitle>Are you sure you want to delete this?</DialogTitle>\n                <DialogContent>\n                  <Button variant=\"contained\" color=\"primary\" onClick={this.closeDialog}>No, keep</Button>\n                  <Button data-id={this.state.currentToDo} variant=\"contained\" color=\"secondary\" onClick={this.deleteToDo}>Yes, delete</Button>\n                </DialogContent>\n            </Dialog>\n\n      </Container>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}