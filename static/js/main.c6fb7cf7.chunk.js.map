{"version":3,"sources":["components/Navbar.jsx","components/AddToDo.jsx","components/ToDo.jsx","components/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","AddToDo","props","onSubmit","addToDo","onChange","handleChange","type","value","input","placeholder","onClick","ToDo","console","log","date","title","width","height","viewBox","fill","xmlns","fillRule","d","ToDoList","todos","map","todo","index","key","App","e","setState","target","state","preventDefault","newToDo","Date","toLocaleDateString","concat","this","role","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iOAWeA,G,MARA,WACX,OACI,yBAAKC,UAAU,yDACX,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,sB,OCSGC,EAbC,SAAAC,GACZ,OACI,0BAAMC,SAAUD,EAAME,SAClB,yBAAKL,UAAU,oBACX,uCAAOM,SAAUH,EAAMI,aAAcC,KAAK,OAAOC,MAAON,EAAMO,MAAOC,YAAY,iBAAiBX,UAAU,gBAA5G,cAAuI,iBACvI,yBAAKA,UAAU,sBACX,wCAAQY,QAAST,EAAME,QAASG,KAAK,SAASR,UAAU,mBAAxD,OAA+E,UAA/E,WCiBLa,EAvBF,SAAAV,GAET,OADAW,QAAQC,IAAIZ,EAAMa,MAEd,4BACI,4BAAKb,EAAMc,OACX,4BAAKd,EAAMa,MACX,4BACI,yBAAKhB,UAAU,eAAekB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,OAAOC,MAAM,8BACzF,0BAAMC,SAAS,UAAUC,EAAE,2JAC3B,0BAAMD,SAAS,UAAUC,EAAE,oKAGnC,4BACI,yBAAKxB,UAAU,iBAAiBkB,MAAM,MAAMC,OAAO,MAAMC,QAAQ,YAAYC,KAAK,UAAUC,MAAM,8BAC9F,0BAAMC,SAAS,UAAUC,EAAE,qEAC3B,0BAAMD,SAAS,UAAUC,EAAE,gDAC3B,0BAAMD,SAAS,UAAUC,EAAE,kDCUhCC,EAzBE,SAAAtB,GAEb,OACI,2BAAOH,UAAU,SACb,+BACI,4BACI,oCACA,oCACA,oCACA,wCAGR,+BAGQG,EAAMuB,MAAMC,KAAI,SAACC,EAAMC,GAAP,OACZ,kBAAC,EAAD,CAAMC,IAAKD,EAAOb,KAAMY,EAAKZ,KAAMC,MAAOW,EAAKX,cCmExDc,G,mBA7Eb,aAAe,IAAD,8BACZ,+CASFxB,aAAe,SAACyB,GACd,EAAKC,SAAS,CAAEvB,MAAOsB,EAAEE,OAAOzB,QAChCK,QAAQC,IAAI,EAAKoB,MAAMT,QAZX,EAedrB,QAAU,SAAA2B,GAERA,EAAEI,iBAEE,EAAKD,MAAMzB,OAGb,EAAKuB,UAAU,SAACE,GAEd,IAGME,EAAU,CACdrB,MAJW,IAAIsB,MAIJC,qBACXtB,MAAOkB,EAAMzB,OAKf,MAAO,CACLgB,MAJYS,EAAMT,MAAMc,OAAOH,GAK/B3B,MAAO,sBAjCb,EAAKyB,MAAQ,CACXzB,MAAO,GACPgB,MAAO,IALG,E,sEA6CJ,IAEAhB,EAAU+B,KAAKN,MAAfzB,MAER,OACE,yBAAKV,UAAU,OAEb,kBAAC,EAAD,MAEA,0BAAM0C,KAAK,OAAO1C,UAAU,aAC1B,yBAAKA,UAAU,oBAEb,4BAAKU,GAEL,kBAAC,EAAD,CAASD,MAAOC,EAAOC,YAAaD,EAAOH,aAAckC,KAAKlC,aAAcF,QAASoC,KAAKpC,UAE1F,4BAAQL,UAAU,qBAAlB,sBAEA,6BAEA,yCAEA,kBAAC,EAAD,CAAU0B,MAAOe,KAAKN,MAAMT,e,GArEtBiB,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c6fb7cf7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\r\n            <a className=\"navbar-brand\" href=\"#\">React ToDo List</a>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst AddToDo = props => {\r\n    return (\r\n        <form onSubmit={props.addToDo}>\r\n            <div className=\"input-group mb-3\">\r\n                <input onChange={props.handleChange} type=\"text\" value={props.input} placeholder=\"Add a new ToDo\" className=\"form-control\" placeholder=\"Add a ToDo..\" />\r\n                <div className=\"input-group-append\">\r\n                    <button onClick={props.addToDo} type=\"submit\" className=\"btn btn-primary\" type=\"button\">Add</button>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default AddToDo;","import React from 'react';\r\n\r\nconst ToDo = props => {\r\n    console.log(props.date);\r\n    return (\r\n        <tr>\r\n            <td>{props.title}</td>\r\n            <td>{props.date}</td>\r\n            <td>\r\n                <svg className=\"bi bi-pencil\" width=\"2em\" height=\"2em\" viewBox=\"0 0 20 20\" fill=\"gold\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M13.293 3.293a1 1 0 011.414 0l2 2a1 1 0 010 1.414l-9 9a1 1 0 01-.39.242l-3 1a1 1 0 01-1.266-1.265l1-3a1 1 0 01.242-.391l9-9zM14 4l2 2-9 9-3 1 1-3 9-9z\" ></path>\r\n                    <path fillRule=\"evenodd\" d=\"M14.146 8.354l-2.5-2.5.708-.708 2.5 2.5-.708.708zM5 12v.5a.5.5 0 00.5.5H6v.5a.5.5 0 00.5.5H7v.5a.5.5 0 00.5.5H8v-1.5a.5.5 0 00-.5-.5H7v-.5a.5.5 0 00-.5-.5H5z\" ></path>\r\n                </svg>           \r\n            </td>\r\n            <td>\r\n                <svg className=\"bi bi-x-circle\" width=\"2em\" height=\"2em\" viewBox=\"0 0 20 20\" fill=\"darkred\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 17a7 7 0 100-14 7 7 0 000 14zm0 1a8 8 0 100-16 8 8 0 000 16z\"></path>\r\n                    <path fillRule=\"evenodd\" d=\"M12.646 13.354l-6-6 .708-.708 6 6-.708.708z\" ></path>\r\n                    <path fillRule=\"evenodd\" d=\"M7.354 13.354l6-6-.708-.708-6 6 .708.708z\" ></path>\r\n                </svg>\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nexport default ToDo;","import React from 'react';\r\nimport ToDo from './ToDo.jsx';\r\n\r\nconst ToDoList = props => {\r\n\r\n    return (\r\n        <table className=\"table\">\r\n            <thead>\r\n                <tr>\r\n                    <th>Date</th>\r\n                    <th>ToDo</th>\r\n                    <th>Edit</th>\r\n                    <th>Delete</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                {\r\n                    // Map want forEach werkt niet\r\n                    props.todos.map((todo, index) => \r\n                        <ToDo key={index} date={todo.date} title={todo.title} />\r\n                    )\r\n                }\r\n\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default ToDoList;","import React, { Component } from 'react';\nimport Card from './components/Card.jsx';\nimport Navbar from './components/Navbar.jsx';\nimport AddToDo from './components/AddToDo.jsx';\nimport ToDoList from './components/ToDoList.jsx';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      input: '',\n      todos: []\n    }\n\n  }\n\n  handleChange = (e) => {\n    this.setState({ input: e.target.value })\n    console.log(this.state.todos);\n  }\n\n  addToDo = e => {\n\n    e.preventDefault();\n\n    if (this.state.input) {\n\n      // setState als functie  met concat want push it niet toegestaan\n      this.setState( (state) => {\n\n        const date = new Date();\n\n        // Nieuw todo als object maken\n        const newToDo = {\n          date: date.toLocaleDateString(),\n          title: state.input,\n        }\n        const todos = state.todos.concat(newToDo);\n\n        // State updaten door nieuwe state object te returnen\n        return {\n          todos,\n          input: 'Add a new ToDo'\n        };\n\n      });\n\n    }\n\n  };\n\n  render() {\n\n    const { input } = this.state;\n\n    return (\n      <div className=\"App\">\n\n        <Navbar />\n\n        <main role=\"main\" className=\"container\">\n          <div className=\"starter-template\">\n\n            <h1>{input}</h1>\n\n            <AddToDo value={input} placeholder={input} handleChange={this.handleChange} addToDo={this.addToDo} />\n\n            <button className=\"btn btn-secondary\">Add 5 random ToDos</button>\n\n            <hr/>\n\n            <h2>ToDo list</h2>\n            \n            <ToDoList todos={this.state.todos} />\n\n          </div>\n        </main>\n\n      </div>\n    )\n  };\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}